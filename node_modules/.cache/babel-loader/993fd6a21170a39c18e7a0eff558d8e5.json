{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    const options = this.container.options;\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const trail = options.particles.move.trail;\n    const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n    this.coverColor = coverRgb !== undefined ? {\n      r: coverRgb.r,\n      g: coverRgb.g,\n      b: coverRgb.b,\n      a: cover.opacity\n    } : undefined;\n    this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n    this.element = canvas;\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.element.width = this.size.width;\n    this.element.height = this.size.height;\n  }\n\n  paint() {\n    const options = this.container.options;\n\n    if (!this.context) {\n      return;\n    }\n\n    if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n    } else {\n      this.paintBase();\n    }\n  }\n\n  clear() {\n    const options = this.container.options;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link1.destination;\n    const p3 = link2.destination;\n    const triangleOptions = p1.particlesOptions.links.triangles;\n    const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const pos3 = p3.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n    if (!colorTriangle) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = p1.getFillColor();\n        const destColor = p2.getFillColor();\n\n        if (sourceColor && destColor) {\n          colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorTriangle = linkColor;\n      }\n    }\n\n    const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n  }\n\n  drawLinkLine(p1, link) {\n    var _a, _b, _c, _d;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link.destination;\n    let opacity = link.opacity;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorLine;\n    const twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      const twinkleFreq = twinkle.frequency;\n      const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      const twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n        const destColor = (_b = p2.getFillColor()) !== null && _b !== void 0 ? _b : p2.getStrokeColor();\n\n        if (sourceColor && destColor) {\n          colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorLine = linkColor;\n      }\n    }\n\n    const width = (_c = p1.linksWidth) !== null && _c !== void 0 ? _c : container.retina.linksWidth;\n    const maxDistance = (_d = p1.linksDistance) !== null && _d !== void 0 ? _d : container.retina.linksDistance;\n    Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n  }\n\n  drawConnectLine(p1, p2) {\n    var _a;\n\n    const lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    var _a;\n\n    const container = this.container;\n    const ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const beginPos = particle.getPosition();\n    Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e;\n\n    if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n\n    if (pfColor === undefined) {\n      return;\n    }\n\n    const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n    const options = this.container.options;\n    const twinkle = particle.particlesOptions.twinkle.particles;\n    const twinkleFreq = twinkle.frequency;\n    const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n    const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    const radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n    const opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n    const infectionStage = particle.infecter.infectionStage;\n    const infection = options.infection;\n    const infectionStages = infection.stages;\n    const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n    const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n    const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n    const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n    if (!this.context || !fillColorValue) {\n      return;\n    }\n\n    const strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity) : fillColorValue;\n\n    if (particle.links.length > 0) {\n      this.context.save();\n\n      for (const link of particle.links) {\n        if (particle.particlesOptions.links.triangles.enable) {\n          const links = particle.links.map(l => l.destination);\n          const vertices = link.destination.links.filter(t => links.indexOf(t.destination) >= 0);\n\n          if (vertices.length) {\n            for (const vertice of vertices) {\n              this.drawLinkTriangle(particle, link, vertice);\n            }\n          }\n        }\n\n        this.drawLinkLine(particle, link);\n      }\n\n      this.context.restore();\n    }\n\n    if (radius > 0) {\n      Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n    }\n  }\n\n  drawPlugin(plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  }\n\n  paintBase(baseColor) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n  }\n\n  lineStyle(p1, p2) {\n    const options = this.container.options;\n    const connectOptions = options.interactivity.modes.connect;\n\n    if (this.context) {\n      return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n    }\n  }\n\n  initBackground() {\n    const options = this.container.options;\n    const background = options.background;\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const elementStyle = element.style;\n\n    if (background.color) {\n      const color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["C:/Users/yuvat/Desktop/face-recognition-brain/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","constructor","container","size","height","width","context","generatedCanvas","init","resize","options","cover","backgroundMask","color","trail","particles","move","coverRgb","ColorUtils","colorToRgb","coverColor","undefined","r","g","b","a","opacity","trailFillColor","fillColor","initBackground","paint","loadCanvas","canvas","_a","className","Constants","canvasClass","element","remove","offsetHeight","offsetWidth","getContext","retina","destroy","CanvasUtils","clear","enable","paintBase","getStyleFromRgb","length","drawLinkTriangle","p1","link1","link2","_b","p2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","pos1","getPosition","pos2","pos3","ctx","colorTriangle","linksOptions","linkColor","id","linksColors","get","linksColor","randomColorValue","getRandomRgbColor","sourceColor","getFillColor","destColor","mix","hslColor","hslToRgb","linksWidth","drawLinkLine","link","_c","_d","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","getStrokeColor","maxDistance","linksDistance","warp","shadow","drawConnectLine","lineStyle","drawGrabLine","particle","lineColor","mousePos","beginPos","drawParticle","delta","_e","image","loaded","pfColor","psColor","radius","bubble","infectionStage","infecter","infection","infectionStages","stages","infectionColor","infectionRgb","fColor","sColor","fillColorValue","strokeColorValue","stroke","save","map","l","vertices","filter","t","indexOf","vertice","restore","drawPlugin","plugin","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","style","backgroundColor","backgroundImage","position","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        const options = this.container.options;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n        this.coverColor =\n            coverRgb !== undefined\n                ? {\n                    r: coverRgb.r,\n                    g: coverRgb.g,\n                    b: coverRgb.b,\n                    a: cover.opacity,\n                }\n                : undefined;\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n        this.element = canvas;\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (!this.context) {\n            return;\n        }\n        if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n        }\n        else {\n            this.paintBase();\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getFillColor();\n                const destColor = p2.getFillColor();\n                if (sourceColor && destColor) {\n                    colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorTriangle = linkColor;\n            }\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a, _b, _c, _d;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors.get(linksOptions.id)\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor();\n                const destColor = (_b = p2.getFillColor()) !== null && _b !== void 0 ? _b : p2.getStrokeColor();\n                if (sourceColor && destColor) {\n                    colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorLine = linkColor;\n            }\n        }\n        const width = (_c = p1.linksWidth) !== null && _c !== void 0 ? _c : container.retina.linksWidth;\n        const maxDistance = (_d = p1.linksDistance) !== null && _d !== void 0 ? _d : container.retina.linksDistance;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e;\n        if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        if (pfColor === undefined) {\n            return;\n        }\n        const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n        const options = this.container.options;\n        const twinkle = particle.particlesOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = (_c = particle.bubble.radius) !== null && _c !== void 0 ? _c : particle.size.value;\n        const opacity = twinkling ? twinkle.opacity : (_d = particle.bubble.opacity) !== null && _d !== void 0 ? _d : particle.opacity.value;\n        const infectionStage = particle.infecter.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pfColor);\n        const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(psColor);\n        const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n        if (!this.context || !fillColorValue) {\n            return;\n        }\n        const strokeColorValue = sColor !== undefined\n            ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_e = particle.stroke.opacity) !== null && _e !== void 0 ? _e : opacity)\n            : fillColorValue;\n        if (particle.links.length > 0) {\n            this.context.save();\n            for (const link of particle.links) {\n                if (particle.particlesOptions.links.triangles.enable) {\n                    const links = particle.links.map((l) => l.destination);\n                    const vertices = link.destination.links.filter((t) => links.indexOf(t.destination) >= 0);\n                    if (vertices.length) {\n                        for (const vertice of vertices) {\n                            this.drawLinkTriangle(particle, link, vertice);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        if (radius > 0) {\n            Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n        }\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    paintBase(baseColor) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}